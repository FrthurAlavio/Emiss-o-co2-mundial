import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Comparador Global de Emiss√µes de CO‚ÇÇ",
    page_icon="üåç",
    layout="wide"
)

# CSS personalizado para melhorar a apar√™ncia
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1e88e5;
        text-align: center;
        margin-bottom: 1rem;
    }
    .subheader {
        font-size: 1.5rem;
        color: #424242;
        margin-bottom: 1rem;
    }
    .chart-container {
        background-color: #f5f5f5;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card {
        background-color: #f9f9f9;
        border-radius: 5px;
        padding: 1rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12);
        margin-bottom: 1rem;
    }
    .footnote {
        font-size: 0.8rem;
        color: #757575;
        font-style: italic;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo e descri√ß√£o do app
st.markdown("<h1 class='main-header'>üåç Comparador Global de Emiss√µes de CO‚ÇÇ</h1>", unsafe_allow_html=True)

col_intro1, col_intro2 = st.columns([3, 1])
with col_intro1:
    st.markdown("""
    Esta aplica√ß√£o permite visualizar e comparar as emiss√µes de CO‚ÇÇ entre diferentes pa√≠ses e anos.
    Explore os dados atrav√©s de mapas interativos e gr√°ficos comparativos.
    """)
with col_intro2:
    st.markdown("<p class='footnote'>Dados de:</p>", unsafe_allow_html=True)
    st.link_button("Our World in Data", "https://ourworldindata.org/co2-and-greenhouse-gas-emissions")

# Fun√ß√£o para carregar dados com cache
@st.cache_data
def carregar_dados():
    try:
        caminho_arquivo = 'owid-co2-data.csv'
        df = pd.read_csv(caminho_arquivo)
        # Garantir que colunas importantes estejam presentes
        required_columns = ['country', 'year', 'co2', 'iso_code']
        for col in required_columns:
            if col not in df.columns:
                if col == 'iso_code':
                    # Criar mapeamento de pa√≠ses para c√≥digos ISO se n√£o existir
                    df['iso_code'] = df['country'].map(get_country_codes())
                else:
                    st.error(f"Coluna {col} n√£o encontrada no arquivo de dados.")
        return df
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        # Retornar DataFrame vazio com estrutura base se houver erro
        return pd.DataFrame(columns=['country', 'year', 'co2', 'iso_code'])

# Fun√ß√£o para obter c√≥digos ISO de pa√≠ses (usado se n√£o estiverem no dataset)
def get_country_codes():
    # Dicion√°rio b√°sico de mapeamento pa√≠s -> c√≥digo ISO
    # Na implementa√ß√£o completa, isso poderia ser um arquivo CSV separado
    return {
        'World': 'OWID_WRL', 'United States': 'USA', 'China': 'CHN', 
        'India': 'IND', 'Russia': 'RUS', 'Brazil': 'BRA', 
        'Germany': 'DEU', 'United Kingdom': 'GBR', 'France': 'FRA',
        'Japan': 'JPN', 'Canada': 'CAN', 'Australia': 'AUS',
        # Adicionar mais mapeamentos conforme necess√°rio
    }

# Carregar os dados
with st.spinner('Carregando dados...'):
    df = carregar_dados()

# Verificar se os dados foram carregados corretamente
if df.empty:
    st.error("N√£o foi poss√≠vel carregar os dados. Verifique se o arquivo 'owid-co2-data.csv' est√° dispon√≠vel.")
    st.stop()

# Limpeza e prepara√ß√£o dos dados
def limpar_dados(df):
    # Remover linhas com valores ausentes nas colunas essenciais
    df_clean = df.dropna(subset=['country', 'year', 'co2'])
    
    # Converter ano para inteiro
    df_clean['year'] = df_clean['year'].astype(int)
    
    # Garantir que a coluna CO2 seja num√©rica
    df_clean['co2'] = pd.to_numeric(df_clean['co2'], errors='coerce')
    
    # Filtrar para incluir apenas pa√≠ses (remover agrega√ß√µes)
    excludes = ['World', 'International Transport', 'EU-27', 'EU-28']
    df_countries = df_clean[~df_clean['country'].isin(excludes)]
    
    return df_clean, df_countries

df_clean, df_countries = limpar_dados(df)

# Lista de anos dispon√≠veis
anos_disponiveis = sorted(df_clean['year'].unique())
anos_validos = [ano for ano in anos_disponiveis if ano >= 1990]

# Interface do usu√°rio com tabs para organizar o conte√∫do
tab1, tab2, tab3 = st.tabs(["üìä Compara√ß√£o Entre Anos", "üó∫Ô∏è Mapa Global", "üìà Tend√™ncias Hist√≥ricas"])

with tab1:
    st.markdown("<h2 class='subheader'>Compara√ß√£o de Emiss√µes entre Anos</h2>", unsafe_allow_html=True)
    
    # Sele√ß√£o de dois anos para compara√ß√£o
    col1, col2 = st.columns(2)
    with col1:
        ano1 = st.selectbox("Escolha o 1¬∫ ano:", anos_validos, index=len(anos_validos)-5)
    with col2:
        ano2 = st.selectbox("Escolha o 2¬∫ ano para comparar:", anos_validos, index=len(anos_validos)-1)
    
    # Filtrar pa√≠ses com dados em ambos os anos
    df_ano1 = df_clean[df_clean['year'] == ano1]
    df_ano2 = df_clean[df_clean['year'] == ano2]
    paises_comuns = sorted(set(df_ano1['country']).intersection(set(df_ano2['country'])))
    
    # Adicionar op√ß√£o de filtro por continente/regi√£o
    if 'continent' in df_clean.columns:
        continentes = ['Todos'] + sorted(df_clean['continent'].dropna().unique().tolist())
        continente_selecionado = st.selectbox("Filtrar por continente:", continentes)
        
        if continente_selecionado != 'Todos':
            paises_filtrados = df_clean[df_clean['continent'] == continente_selecionado]['country'].unique()
            paises_comuns = [p for p in paises_comuns if p in paises_filtrados]
    
    # Adicionar campo de busca para facilitar sele√ß√£o de pa√≠ses
    pais_busca = st.text_input("Buscar pa√≠s:", "")
    if pais_busca:
        paises_filtrados = [p for p in paises_comuns if pais_busca.lower() in p.lower()]
        if not paises_filtrados:
            st.info("Nenhum pa√≠s encontrado com esse termo.")
            paises_selecionados = st.multiselect("Escolha pa√≠ses para comparar:", paises_comuns)
        else:
            paises_selecionados = st.multiselect("Escolha pa√≠ses para comparar:", paises_comuns, default=paises_filtrados[:5])
    else:
        paises_sugeridos = ['Brazil', 'United States', 'China', 'India', 'Germany']
        paises_default = [p for p in paises_sugeridos if p in paises_comuns]
        paises_selecionados = st.multiselect("Escolha pa√≠ses para comparar:", paises_comuns, default=paises_default[:3])
    
    if not paises_selecionados:
        st.info("Selecione pelo menos um pa√≠s para comparar.")
    else:
        # Calcular m√©dias globais para os anos selecionados
        dados_mundo1 = df_ano1[df_ano1['country'] == 'World']
        dados_mundo2 = df_ano2[df_ano2['country'] == 'World']
        
        if not dados_mundo1.empty and not dados_mundo2.empty:
            media1 = dados_mundo1['co2'].values[0]
            media2 = dados_mundo2['co2'].values[0]
        else:
            media1 = df_ano1['co2'].mean()
            media2 = df_ano2['co2'].mean()
        
        # Criar dataframes para os pa√≠ses selecionados
        df1 = df_ano1[df_ano1['country'].isin(paises_selecionados)]
        df2 = df_ano2[df_ano2['country'].isin(paises_selecionados)]
        
        # Gr√°fico de compara√ß√£o usando Plotly (mais interativo)
        st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
        fig = go.Figure()
        
        # Adicionar barras para cada ano
        fig.add_trace(go.Bar(
            x=df1['country'],
            y=df1['co2'],
            name=f'Emiss√µes em {ano1}',
            marker_color='#1e88e5'
        ))
        
        fig.add_trace(go.Bar(
            x=df2['country'],
            y=df2['co2'],
            name=f'Emiss√µes em {ano2}',
            marker_color='#43a047'
        ))
        
        # Adicionar linhas para m√©dias globais
        fig.add_trace(go.Scatter(
            x=df1['country'], 
            y=[media1] * len(df1),
            mode='lines',
            name=f'M√©dia Global {ano1} ({round(media1, 1)} Mt)',
            line=dict(color='blue', dash='dash')
        ))
        
        fig.add_trace(go.Scatter(
            x=df1['country'], 
            y=[media2] * len(df1),
            mode='lines',
            name=f'M√©dia Global {ano2} ({round(media2, 1)} Mt)',
            line=dict(color='green', dash='dash')
        ))
        
        # Configurar layout
        fig.update_layout(
            title=f'Compara√ß√£o de Emiss√µes de CO‚ÇÇ entre {ano1} e {ano2}',
            xaxis_title='Pa√≠s',
            yaxis_title='Emiss√µes de CO‚ÇÇ (milh√µes de toneladas)',
            barmode='group',
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            ),
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("</div>", unsafe_allow_html=True)
        
        # An√°lise detalhada por pa√≠s
        st.markdown("<h3 class='subheader'>üìå An√°lise Detalhada por Pa√≠s</h3>", unsafe_allow_html=True)
        
        # Dividir pa√≠ses em colunas para melhor visualiza√ß√£o
        cols = st.columns(min(len(paises_selecionados), 3))
        
        for i, pais in enumerate(paises_selecionados):
            col_index = i % len(cols)
            
            with cols[col_index]:
                st.markdown(f"<div class='metric-card'>", unsafe_allow_html=True)
                
                v1 = df1[df1['country'] == pais]['co2'].values[0]
                v2 = df2[df2['country'] == pais]['co2'].values[0]
                
                # Calcular varia√ß√£o percentual
                if v1 > 0:
                    var_pct = ((v2 - v1) / v1) * 100
                else:
                    var_pct = float('inf') if v2 > 0 else 0
                
                st.markdown(f"#### {pais}")
                
                # Criar m√©tricas mais visuais
                col_m1, col_m2 = st.columns(2)
                with col_m1:
                    st.metric(
                        label=f"Emiss√µes em {ano1}",
                        value=f"{round(v1):,} Mt",
                        delta=f"{round(v1/media1, 1)}x m√©dia global"
                    )
                
                with col_m2:
                    st.metric(
                        label=f"Emiss√µes em {ano2}",
                        value=f"{round(v2):,} Mt",
                        delta=f"{round(v2/media2, 1)}x m√©dia global"
                    )
                
                # Mostrar varia√ß√£o entre os anos
                dif = v2 - v1
                
                # Minigrafico de varia√ß√£o
                mini_data = [v1, v2]
                mini_fig, mini_ax = plt.subplots(figsize=(3, 1))
                mini_ax.plot(mini_data, marker='o', color='#1e88e5')
                mini_ax.grid(True, linestyle='--', alpha=0.7)
                mini_ax.set_xticks([0, 1])
                mini_ax.set_xticklabels([str(ano1), str(ano2)])
                mini_ax.set_title("Tend√™ncia")
                st.pyplot(mini_fig)
                
                if dif > 0:
                    st.markdown(f"**Aumento de {round(dif):,} Mt** ({round(var_pct, 1)}%) entre {ano1} e {ano2}")
                elif dif < 0:
                    st.markdown(f"**Redu√ß√£o de {round(abs(dif)):,} Mt** ({round(abs(var_pct), 1)}%) entre {ano1} e {ano2}")
                else:
                    st.info("Sem varia√ß√£o entre os anos")
                
                st.markdown("</div>", unsafe_allow_html=True)

with tab2:
    st.markdown("<h2 class='subheader'>Mapa Global de Emiss√µes de CO‚ÇÇ</h2>", unsafe_allow_html=True)
    
    # Sele√ß√£o de ano para o mapa
    ano_mapa = st.select_slider(
        "Selecione o ano para visualizar no mapa:",
        options=anos_validos,
        value=anos_validos[-1]
    )
    
    # Filtrar dados para o ano selecionado
    df_mapa = df_clean[df_clean['year'] == ano_mapa].copy()
    
    # Verificar se existem dados de c√≥digos ISO
    if 'iso_code' not in df_mapa.columns or df_mapa['iso_code'].isna().all():
        st.warning("Dados de c√≥digos ISO dos pa√≠ses n√£o est√£o dispon√≠veis. O mapa pode n√£o exibir todos os pa√≠ses corretamente.")
    
    # Adicionar controles para o tipo de visualiza√ß√£o
    col_vis1, col_vis2 = st.columns(2)
    
    with col_vis1:
        metrica_mapa = st.selectbox(
            "Escolha a m√©trica para visualizar:",
            ["co2", "co2_per_capita"] if "co2_per_capita" in df_mapa.columns else ["co2"]
        )
    
    with col_vis2:
        escala = st.selectbox(
            "Escolha a escala do mapa:",
            ["Linear", "Logar√≠tmica"]
        )
    
    # Preparar dados para o mapa
    if metrica_mapa == "co2":
        titulo_mapa = f"Emiss√µes Totais de CO‚ÇÇ em {ano_mapa} (milh√µes de toneladas)"
    else:
        titulo_mapa = f"Emiss√µes de CO‚ÇÇ per capita em {ano_mapa} (toneladas por pessoa)"
    
    # Criar mapa coropl√©tico interativo com Plotly
    st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
    
    fig_map = px.choropleth(
        df_mapa,
        locations="iso_code" if "iso_code" in df_mapa.columns else None,
        locationmode="ISO-3" if "iso_code" in df_mapa.columns else "country names",
        color=metrica_mapa,
        hover_name="country",
        hover_data={
            metrica_mapa: True,
            "year": False,
            "iso_code": False
        },
        title=titulo_mapa,
        color_continuous_scale="Viridis" if metrica_mapa == "co2" else "YlOrRd",
        log_color=escala == "Logar√≠tmica",
        projection="natural earth"
    )
    
    fig_map.update_layout(
        geo=dict(
            showframe=False,
            showcoastlines=True,
            projection_type='equirectangular'
        ),
        height=600,
        margin={"r":0,"t":50,"l":0,"b":0}
    )
    
    st.plotly_chart(fig_map, use_container_width=True)
    
    # Adicionar legenda/explica√ß√£o
    st.markdown("""
    <div class='footnote'>
    Este mapa mostra as emiss√µes de CO‚ÇÇ por pa√≠s. As √°reas mais escuras indicam maiores emiss√µes.
    Passe o mouse sobre um pa√≠s para ver os detalhes espec√≠ficos.
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Top 10 pa√≠ses emissores
    st.markdown("<h3 class='subheader'>Top 10 Pa√≠ses Emissores em {}</h3>".format(ano_mapa), unsafe_allow_html=True)
    
    top10 = df_mapa.sort_values(by=metrica_mapa, ascending=False).head(10)
    
    fig_top10 = px.bar(
        top10,
        x='country',
        y=metrica_mapa,
        title=f"Top 10 Pa√≠ses por {metrica_mapa} em {ano_mapa}",
        color=metrica_mapa,
        labels={'country': 'Pa√≠s', metrica_mapa: 'Emiss√µes de CO‚ÇÇ'},
        color_continuous_scale='Viridis',
        height=400
    )
    
    fig_top10.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig_top10, use_container_width=True)

with tab3:
    st.markdown("<h2 class='subheader'>Tend√™ncias Hist√≥ricas de Emiss√µes</h2>", unsafe_allow_html=True)
    
    # Sele√ß√£o de pa√≠ses para tend√™ncias
    paises_tendencia = st.multiselect(
        "Escolha pa√≠ses para analisar tend√™ncias:",
        sorted(df_countries['country'].unique()),
        default=['Brazil', 'United States', 'China'][:3] if all(p in df_countries['country'].unique() for p in ['Brazil', 'United States', 'China']) else None
    )
    
    # Intervalo de anos
    ano_min, ano_max = st.select_slider(
        "Intervalo de anos:",
        options=anos_disponiveis,
        value=(anos_disponiveis[0], anos_disponiveis[-1])
    )
    
    if not paises_tendencia:
        st.info("Selecione pelo menos um pa√≠s para visualizar tend√™ncias hist√≥ricas.")
    else:
        # Filtrar dados para os pa√≠ses e intervalo de anos selecionados
        df_tendencia = df_clean[
            (df_clean['country'].isin(paises_tendencia)) & 
            (df_clean['year'] >= ano_min) & 
            (df_clean['year'] <= ano_max)
        ]
        
        # Gr√°fico de linha para tend√™ncias
        st.markdown("<div class='chart-container'>", unsafe_allow_html=True)
        
        fig_trend = px.line(
            df_tendencia,
            x='year',
            y='co2',
            color='country',
            title=f"Tend√™ncia de Emiss√µes de CO‚ÇÇ ({ano_min}-{ano_max})",
            labels={'year': 'Ano', 'co2': 'Emiss√µes de CO‚ÇÇ (milh√µes de toneladas)', 'country': 'Pa√≠s'},
            height=500
        )
        
        fig_trend.update_layout(
            hovermode="x unified",
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        st.plotly_chart(fig_trend, use_container_width=True)
        
        # Adicionar op√ß√£o para visualizar emiss√µes per capita se dispon√≠vel
        if "co2_per_capita" in df_clean.columns:
            mostrar_per_capita = st.checkbox("Mostrar emiss√µes per capita", value=False)
            
            if mostrar_per_capita:
                fig_per_capita = px.line(
                    df_tendencia,
                    x='year',
                    y='co2_per_capita',
                    color='country',
                    title=f"Tend√™ncia de Emiss√µes de CO‚ÇÇ per Capita ({ano_min}-{ano_max})",
                    labels={'year': 'Ano', 'co2_per_capita': 'Emiss√µes de CO‚ÇÇ per Capita (toneladas)', 'country': 'Pa√≠s'},
                    height=500
                )
                
                fig_per_capita.update_layout(
                    hovermode="x unified",
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    )
                )
                
                st.plotly_chart(fig_per_capita, use_container_width=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Tabela de dados
        with st.expander("Ver dados em tabela"):
            st.dataframe(
                df_tendencia[['country', 'year', 'co2'] + (['co2_per_capita'] if 'co2_per_capita' in df_tendencia.columns else [])],
                use_container_width=True
            )

# Rodap√© com informa√ß√µes adicionais
st.markdown("---")
st.markdown("""
<div class='footnote'>
Desenvolvido com Streamlit. Dados de emiss√µes de CO‚ÇÇ fornecidos por Our World in Data.
√öltima atualiza√ß√£o: Maio 2025.
</div>
""", unsafe_allow_html=True)

# Adicionar informa√ß√µes sobre o dataset em um expander
with st.expander("Sobre os dados"):
    st.markdown("""
    ### Fonte de Dados
    Os dados utilizados nesta aplica√ß√£o s√£o provenientes do **Our World in Data** e incluem:
    
    - **co2**: Emiss√µes anuais de CO‚ÇÇ em milh√µes de toneladas
    - **co2_per_capita**: Emiss√µes anuais de CO‚ÇÇ per capita em toneladas por pessoa (quando dispon√≠vel)
    
    ### Interpreta√ß√£o dos Dados
    - As emiss√µes de CO‚ÇÇ s√£o um indicador importante para avaliar o impacto ambiental de cada pa√≠s
    - Comparar as emiss√µes totais com as emiss√µes per capita oferece uma vis√£o mais completa sobre a efici√™ncia e o padr√£o de desenvolvimento de cada na√ß√£o
    
    ### Limita√ß√µes
    - Alguns pa√≠ses podem ter dados incompletos ou ausentes para determinados anos
    - As metodologias de coleta e estimativa de dados podem variar entre diferentes regi√µes
    """)
